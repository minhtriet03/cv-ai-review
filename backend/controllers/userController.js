const User = require("../models/userModel");
const {
  registerUser,
  verifyUserEmail,
  loginUser,
} = require("../services/userService");
const { sendPasswordResetEmail } = require("../services/emailService");
const crypto = require("crypto");
const createError = require("http-errors");
const bcrypt = require('bcryptjs');

exports.getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getUserByEmail = async (req, res) => {
  const { email } = req.params;
  try {
    const user = await User.findOne({ email: email.trim().toLowerCase() }); // Find user by email
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.register = async (req, res) => {
  try {
    console.log("Received user data:", req.body);
    const response = await registerUser(req.body);
    console.log("RegisterUser response:", response);
    res.status(200).json(response);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

exports.verifyEmail = async (req, res) => {
  console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend:", req.body);
  try {
    const { email, otp } = req.body;
    const response = await verifyUserEmail(email, otp);
    console.log(email, otp);
    res.status(200).json(response);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // G·ªçi h√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p v√† l·∫•y user + token
    const { user, token } = await loginUser(email, password);

    // G·ª≠i token v√†o cookie
    res.cookie("token", token, {
      httpOnly: true,
      secure: false, // true n·∫øu d√πng HTTPS
      sameSite: "Lax",
      maxAge: 24 * 60 * 60 * 1000 // 1 ng√†y
    });
    
    // Tr·∫£ response (kh√¥ng c·∫ßn tr·∫£ token n·ªØa)
    res.status(200).json({ user });
  } catch (error) {
    const statusCode = error.status || 500;
    res.status(statusCode).json({ message: error.message });
  }
};

exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email: email.trim().toLowerCase() });
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const resetToken = crypto.randomBytes(32).toString("hex");
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour
    await user.save();

    await sendPasswordResetEmail(email, resetToken);

    res.status(200).json({ message: "Password reset email sent" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// reset password
exports.resetPassword = async (req, res) => {
  const { token, newPassword } = req.body;
  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user) {
      return res
        .status(400)
        .json({ message: "Token kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    user.password = newPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Thay ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
exports.changePassword = async (req, res) => {
  const { userId, currentPassword, newPassword } = req.body;

  try {
    // T√¨m ng∆∞·ªùi d√πng theo ID
    const user = await User.findById(userId);
    console.log("t√™n ng∆∞·ªùi d√πng: ", user.name);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const hashed = await bcrypt.hash(currentPassword, 10);
    console.log('currentPassword:', currentPassword);
    console.log('Hash th·ª≠:', hashed);
    console.log('Hash trong DB:', user.password);
    const isPasswordMatch = await bcrypt.compare(currentPassword, user.password);
    console.log(isPasswordMatch);
    if (!isPasswordMatch) {
      console.log("Hashed password in DB:", user.password);
      console.log("password:", currentPassword);
      console.log("Password does not match");
      return res.status(400).json({ message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng" });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;
    await user.save();
    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng" });
  } catch (err) {
    console.log("L·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u:", err);
    res.status(500).json({ message: err.message });
  }
};

// upload image
exports.updateProfilePicture = async (req, res) => {
  try {
    const { userId, imageUrl } = req.body;
    console.log("üì• Data received:", req.body);
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!userId || !imageUrl) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    // C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán trong database
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { profilePicture: imageUrl },
      { new: true } // Tr·∫£ v·ªÅ user ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json({
      success: true,
      message: "Profile picture updated!",
      user: updatedUser,
    });
    console.log("‚úÖ Updated user:", updatedUser);
  } catch (error) {
    console.error("‚ùå Error updating profile picture:", error);
    res
      .status(500)
      .json({ message: "Internal server error", error: error.message });
  }
};

exports.logoutUser = async (req, res) => {
  try {
    // X√≥a cookie c√≥ c√πng options nh∆∞ l√∫c set (ƒë·ªÉ xo√° ƒë√∫ng)
    res.clearCookie("token", {
      httpOnly: true,
      secure: false, // ƒë·ªÉ false n·∫øu ch·∫°y localhost
      sameSite: "Lax", // ph·∫£i kh·ªõp sameSite khi set
    });

    return res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒëƒÉng xu·∫•t:", error);
    return res.status(500).json({ message: "ƒêƒÉng xu·∫•t th·∫•t b·∫°i" });
  }
};

// Controller admin

// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.getUsers = async (req, res, next) => {
    try {
        const users = await User.find();
        console.log("User: ",users);
        res.status(200).json(users);
    } catch (error) {
        next(createError(500, "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng"));
    }
};

// L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng
exports.getUserById = async (req, res, next) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json(user);
    } catch (error) {
        next(createError(500, "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng"));
    }
};

// T·∫°o ng∆∞·ªùi d√πng m·ªõi
exports.createUser = async (req, res, next) => {
    try {
        const newUser = new User(req.body);
        await newUser.save();
        res.status(201).json(newUser);
    } catch (error) {
        next(createError(500, "L·ªói khi t·∫°o ng∆∞·ªùi d√πng"));
    }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUser = async (req, res, next) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedUser) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json(updatedUser);
    } catch (error) {
        next(createError(500, "L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng"));
    }
};

exports.updateName = async (req, res, next) => {
    try {
      console.log(req.body._id);
        const updatedUser = await User.findByIdAndUpdate(req.body._id, req.body, { new: true });
        console.log(updatedUser);
        if (!updatedUser) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json(updatedUser);
    } catch (error) {
        next(createError(500, "L·ªói khi c·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng"));
        console.log(error);
    }
}
exports.blockUser = async (req, res, next) => {
    try {
        const updated = await User.findByIdAndUpdate(req.params.id, { isBlocked: true }, { new: true }); 
        if (!updated) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json({ message: "Kh√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
    } catch (error) {
        console.log(error);
        next(createError(500, "L·ªói khi kh√≥a ng∆∞·ªùi d√πng"));  
    }
}
// M·ªü kh√≥a ng∆∞·ªùi d√πng
exports.unblockUser = async (req, res, next) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(req.params.id, { isBlocked: false }, { new: true });
        if (!updatedUser) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json({ message: "M·ªü kh√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
    } catch (error) {
        next(createError(500, "L·ªói khi m·ªü kh√≥a ng∆∞·ªùi d√πng"));
    }
};
// X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res, next) => {
    try {
        const deletedUser = await User.findByIdAndDelete(req.params.id);
        if (!deletedUser) {
            return next(createError(404, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));
        }
        res.status(200).json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
    } catch (error) {
        next(createError(500, "L·ªói khi x√≥a ng∆∞·ªùi d√πng"));
    }
};
